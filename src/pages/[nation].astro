---
import { type GetStaticPaths, type ImageMetadata } from "astro";
import { getCollection, getEntry, type CollectionEntry } from 'astro:content'
import { render } from 'astro:content';
import CCImageCardRow, { type CardRow } from '@/components/CCImageCardRow.astro';
import Show from "@/components/Show.astro"
import Layout from '@/components/Layouts/Layout.astro';
import Sidebar from '@/components/Sidebar.astro';
import Parchment2 from '@/components/Parchment/Parchment2.astro';
import Map from '@/components/Map.astro';
import { Events } from 'leaflet';

export const getStaticPaths = (async () => {
	const nationCollection = await getCollection("nations")
	const places = await getCollection("places")
	const events = await getCollection("events")
	// const peopleCollection = await getCollection("people")
	
	const paths = await Promise.all(nationCollection.map(async entry => {
		const notablePeople = (
			await Promise
				.all(entry.data.notablePeople?.map(person => getEntry(person.collection, person.id)) || [])
		)
			.filter(entry => !!entry)

		const notablePeopleCards = notablePeople.map(({data: person}) => {
			return {
				title: person.name,
				image: person.image,
				imageAlt: person.imageAlt,
				tags: person.titles?.map(title => ({ label: title, colour: "badge-primary" })) || [],
			} satisfies CardRow
		}) satisfies CardRow[]
		
		const placesFiltered = await Promise.all(places
			.filter(event => event.data.nation.id === entry.id)
			.map(async event => ({
				...event.data,
				nation: (await getEntry(event.data.nation)).data
			})))

		
		return {
			params: {
				nation: entry.id
			},
			props: {
				entry,
				people: notablePeople,
				peopleCards: notablePeopleCards,
				places: placesFiltered,
			},
		}
	}))

	return paths
}) satisfies GetStaticPaths

interface Props {
	entry: CollectionEntry<"nations">,
	people: CollectionEntry<"people">[],
	peopleCards: CardRow[],
	places: CollectionEntry<"places">[],
}

const {
	entry,
	people,
	peopleCards,
	places,
} = Astro.props satisfies Props

console.log(places)

const { Content } = await render(entry as CollectionEntry<"nations">)
---

<Layout>
	<Map />
	<dialog
		open
		class="fixed z-[1001] w-auto h-auto inset-8 rounded-lg bg-transparent indicator"
	>
		<div class="h-full w-full overflow-y-auto p-4">
			<Parchment2 class="-z-10" />
			<h1 class="block font-display text-2xl md:text-6xl">
				{ entry.data.name }
			</h1>

			<div class="indicator-item">
				<a href="/" class="btn btn-lg btn-circle">‚ùå</a>
			</div>

			<article class="prose text-base-content bg-transparent w-full max-w-full" data-theme="light">
				<Content />
			
				<Show when={people.length > 0}>
					<section slot="if" class="">
						<h2 class="font-bold text-lg mb-4">Notable People</h2>
						<CCImageCardRow entries={peopleCards}>
					</section>
				</Show>

				<Show when={people.length > 0}>
					<section slot="if" class="">
						<h2 class="font-bold text-lg mb-4">Places</h2>
						<div class="flex items-stretch justify-start gap-4 w-full overflow-auto @container [&>*]:basis-2/3 [&>*]:shrink-0 [&>*]:@md:basis-60">
							{
								places.map(place => (
									<article
										class="card bg-base-100 shadow-sm not-prose @container/imageCard"
									>
										<figure class="w-full">
											<img
												src={ place?.image?.src }
												alt={ place.imageAlt }
												class="w-full h-full max-h-36 @md/imageCard:max-h-48 object-cover object-top"
											/>
										</figure>
										<div class="card-body p-4">
											<h2 class="font-semibold">{place.name }</h2>
											<Show when={!!place.description}>
												<p slot="if">{ place.description }</p>
											</Show>
										</div>
									</article>
								))
							}
						</div>
					</section>
				</Show>
			</article>

		</div>
		<!-- <div class="grid grid-cols-12 grid-rows-12 w-full h-full">
			<div class="col-start-2 col-end-7 row-start-2 row-end-4 flex items-start justify-center flex-col">
			</div>

			<!-- <Parchment2 class="col-start-2 col-end-7 row-start-4 row-end-12 p-8!">
				<h1>Hello</h1>
			</Parchment2>

			<Parchment2 class="col-start-8 col-end-12 row-start-2 row-end-7 p-8!">
				<h1>Hello</h1>
			</Parchment2>

			<Parchment2 class="col-start-8 col-end-12 row-start-8 row-end-12 p-8!">
				<h1>Hello</h1>
			</Parchment2> -->
		<!-- </div> -->
	</dialog>
	<!-- <Sidebar>
		<article class="prose text-base-content bg-transparent w-full max-w-full" data-theme="light">
			<Content />
		
			<Show when={people.length > 0}>
				<section slot="if" class="">
					<h2 class="font-bold text-lg mb-4">Notable People</h2>
					<CCImageCardRow entries={peopleCards}>
				</section>
			</Show>
		</article>
	</Sidebar> -->
</Layout>

<script>
import { navigate } from 'astro:transitions/client'

document.addEventListener("astro:page-load", () => {
	
	document.addEventListener("click", (e) => {
		const dialog = document.querySelector("dialog")

		if (!dialog) return

		const rect = dialog.getBoundingClientRect();
		const x = e.clientX;
		const y = e.clientY;

		const inBounds =
		x >= rect.left &&
		x <= rect.right &&
		y >= rect.top &&
		y <= rect.bottom;

		if (!inBounds) {
			navigate("/")
		}
	})
})
</script>
